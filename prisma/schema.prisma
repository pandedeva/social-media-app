// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(cuid())
  email     String @unique
  username  String @unique
  clerkId   String @unique
  name      String? 
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  posts               Post[] // One to many
  comments            Comment[] // One to many
  likes               Like[] // One to many

  followers           Follows[]     @relation("following") // user yang memfollow
  following           Follows[]     @relation("follower") // user yang di follow

  // notif untuk user
  notifications       Notification[] @relation("userNotifications")

  // notification yang dibuat oleh user
  notificationsCreated Notification[] @relation("notificationCreator")
}

model Post{
  id        String      @id @default(cuid())
  authorId  String
  content   String?
  image     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) 
  // cascade berguna saat user menghapus akun maka semua post akan terhapus juga

  comments        Comment[]
  likes           Like[]
  notifications   Notification[]
}

model Comment{
  id        String      @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime    @default(now())

  // relations
  author        User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post          Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]

  // carikan saya comment yang dari authorId dan postId 
  @@index([authorId, postId])
}

model Like{
  id        String      @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime    @default(now())

  // relations
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  // carikan saya Like yang dari userId, dan postId
  @@index([userId, postId])

  // satu user tidak bisa memberikan like 2 kali
  @@unique([userId, postId])
}

model Follows{
  followerId  String
  followingId String
  createdAt DateTime    @default(now())

  follower    User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  // carikan saya follow yang dari followerId, dan followingId
  @@index([followerId, followingId])

  // gabungan dari primary key agar tidak follow double
  @@id([followerId, followingId])
}

model Notification{
  id        String      @id @default(cuid())
  userId    String
  creatorId String
  type      NotificationType
  read      Boolean @default(false)
  postId    String?
  commentId String?
  createdAt DateTime @default(now())

  // relations
  user      User     @relation("userNotifications",fields: [userId], references: [id], onDelete: Cascade)
  creator   User     @relation("notificationCreator",fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}